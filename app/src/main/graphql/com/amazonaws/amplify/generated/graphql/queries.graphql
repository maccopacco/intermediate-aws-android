# this is an auto generated file. This will be overwritten
query SyncTestGoals(
  $filter: ModelTestGoalFilterInput
  $limit: Int
  $nextToken: String
  $lastSync: AWSTimestamp
) {
  syncTestGoals(
    filter: $filter
    limit: $limit
    nextToken: $nextToken
    lastSync: $lastSync
  ) {
    items {
      id
      content
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    nextToken
    startedAt
  }
}
query GetTestGoal($id: ID!) {
  getTestGoal(id: $id) {
    id
    content
    _version
    _deleted
    _lastChangedAt
    createdAt
    updatedAt
  }
}
query ListTestGoals(
  $filter: ModelTestGoalFilterInput
  $limit: Int
  $nextToken: String
) {
  listTestGoals(filter: $filter, limit: $limit, nextToken: $nextToken) {
    items {
      id
      content
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    nextToken
    startedAt
  }
}
query SyncUsers(
  $filter: ModelUserFilterInput
  $limit: Int
  $nextToken: String
  $lastSync: AWSTimestamp
) {
  syncUsers(
    filter: $filter
    limit: $limit
    nextToken: $nextToken
    lastSync: $lastSync
  ) {
    items {
      id
      googleID
      originalEmail
      banks {
        nextToken
        startedAt
      }
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    nextToken
    startedAt
  }
}
query GetUser($id: ID!) {
  getUser(id: $id) {
    id
    googleID
    originalEmail
    banks {
      items {
        id
        plaid_access_token
        institution_id
        institution_name
        institution_logo
        last_touched_time
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      nextToken
      startedAt
    }
    _version
    _deleted
    _lastChangedAt
    createdAt
    updatedAt
  }
}
query ListUsers(
  $filter: ModelUserFilterInput
  $limit: Int
  $nextToken: String
) {
  listUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {
    items {
      id
      googleID
      originalEmail
      banks {
        nextToken
        startedAt
      }
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    nextToken
    startedAt
  }
}
query SyncBanks(
  $filter: ModelBankFilterInput
  $limit: Int
  $nextToken: String
  $lastSync: AWSTimestamp
) {
  syncBanks(
    filter: $filter
    limit: $limit
    nextToken: $nextToken
    lastSync: $lastSync
  ) {
    items {
      id
      user {
        id
        googleID
        originalEmail
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      plaid_access_token
      institution_id
      institution_name
      institution_logo
      last_touched_time
      userData {
        id
        max_import_batch
        oldest_pending_time
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    nextToken
    startedAt
  }
}
query GetBank($id: ID!) {
  getBank(id: $id) {
    id
    user {
      id
      googleID
      originalEmail
      banks {
        nextToken
        startedAt
      }
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    plaid_access_token
    institution_id
    institution_name
    institution_logo
    last_touched_time
    userData {
      id
      bank {
        id
        plaid_access_token
        institution_id
        institution_name
        institution_logo
        last_touched_time
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      transactions {
        nextToken
        startedAt
      }
      max_import_batch
      oldest_pending_time
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    _version
    _deleted
    _lastChangedAt
    createdAt
    updatedAt
  }
}
query ListBanks(
  $filter: ModelBankFilterInput
  $limit: Int
  $nextToken: String
) {
  listBanks(filter: $filter, limit: $limit, nextToken: $nextToken) {
    items {
      id
      user {
        id
        googleID
        originalEmail
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      plaid_access_token
      institution_id
      institution_name
      institution_logo
      last_touched_time
      userData {
        id
        max_import_batch
        oldest_pending_time
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    nextToken
    startedAt
  }
}
query SyncUserData(
  $filter: ModelUserDataFilterInput
  $limit: Int
  $nextToken: String
  $lastSync: AWSTimestamp
) {
  syncUserData(
    filter: $filter
    limit: $limit
    nextToken: $nextToken
    lastSync: $lastSync
  ) {
    items {
      id
      bank {
        id
        plaid_access_token
        institution_id
        institution_name
        institution_logo
        last_touched_time
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      transactions {
        nextToken
        startedAt
      }
      max_import_batch
      oldest_pending_time
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    nextToken
    startedAt
  }
}
query GetUserData($id: ID!) {
  getUserData(id: $id) {
    id
    bank {
      id
      user {
        id
        googleID
        originalEmail
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      plaid_access_token
      institution_id
      institution_name
      institution_logo
      last_touched_time
      userData {
        id
        max_import_batch
        oldest_pending_time
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    transactions {
      items {
        id
        importBatch
        importDate
        importSource
        plaidID
        overrideName
        memo
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      nextToken
      startedAt
    }
    max_import_batch
    oldest_pending_time
    _version
    _deleted
    _lastChangedAt
    createdAt
    updatedAt
  }
}
query ListUserDatas(
  $filter: ModelUserDataFilterInput
  $limit: Int
  $nextToken: String
) {
  listUserDatas(filter: $filter, limit: $limit, nextToken: $nextToken) {
    items {
      id
      bank {
        id
        plaid_access_token
        institution_id
        institution_name
        institution_logo
        last_touched_time
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      transactions {
        nextToken
        startedAt
      }
      max_import_batch
      oldest_pending_time
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    nextToken
    startedAt
  }
}
query SyncTransactionWrappers(
  $filter: ModelTransactionWrapperFilterInput
  $limit: Int
  $nextToken: String
  $lastSync: AWSTimestamp
) {
  syncTransactionWrappers(
    filter: $filter
    limit: $limit
    nextToken: $nextToken
    lastSync: $lastSync
  ) {
    items {
      id
      importBatch
      importDate
      importSource
      plaidID
      userData {
        id
        max_import_batch
        oldest_pending_time
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      transaction {
        id
        accountId
        amount
        isoCurrencyCode
        unofficialCurrencyCode
        categoryFolder
        category
        categoryId
        date
        exactTime
        merchantName
        name
        originalDescription
        pending
        pendingTransactionId
        transactionId
        transactionType
        accountOwner
        authorizedDate
        transactionCode
        paymentChannel
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      overrideName
      memo
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    nextToken
    startedAt
  }
}
query GetTransactionWrapper($id: ID!) {
  getTransactionWrapper(id: $id) {
    id
    importBatch
    importDate
    importSource
    plaidID
    userData {
      id
      bank {
        id
        plaid_access_token
        institution_id
        institution_name
        institution_logo
        last_touched_time
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      transactions {
        nextToken
        startedAt
      }
      max_import_batch
      oldest_pending_time
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    transaction {
      id
      wrapper {
        id
        importBatch
        importDate
        importSource
        plaidID
        overrideName
        memo
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      accountId
      amount
      isoCurrencyCode
      unofficialCurrencyCode
      categoryFolder
      category
      categoryId
      date
      exactTime
      location {
        id
        address
        city
        lat
        lon
        region
        storeNumber
        postalCode
        country
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      merchantName
      name
      originalDescription
      paymentMeta {
        id
        byOrderOf
        payee
        payer
        paymentMethod
        paymentProcessor
        ppdId
        reason
        referenceNumber
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      pending
      pendingTransactionId
      transactionId
      transactionType
      accountOwner
      authorizedDate
      transactionCode
      paymentChannel
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    overrideName
    memo
    _version
    _deleted
    _lastChangedAt
    createdAt
    updatedAt
  }
}
query ListTransactionWrappers(
  $filter: ModelTransactionWrapperFilterInput
  $limit: Int
  $nextToken: String
) {
  listTransactionWrappers(
    filter: $filter
    limit: $limit
    nextToken: $nextToken
  ) {
    items {
      id
      importBatch
      importDate
      importSource
      plaidID
      userData {
        id
        max_import_batch
        oldest_pending_time
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      transaction {
        id
        accountId
        amount
        isoCurrencyCode
        unofficialCurrencyCode
        categoryFolder
        category
        categoryId
        date
        exactTime
        merchantName
        name
        originalDescription
        pending
        pendingTransactionId
        transactionId
        transactionType
        accountOwner
        authorizedDate
        transactionCode
        paymentChannel
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      overrideName
      memo
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    nextToken
    startedAt
  }
}
query SyncTransactions(
  $filter: ModelTransactionFilterInput
  $limit: Int
  $nextToken: String
  $lastSync: AWSTimestamp
) {
  syncTransactions(
    filter: $filter
    limit: $limit
    nextToken: $nextToken
    lastSync: $lastSync
  ) {
    items {
      id
      wrapper {
        id
        importBatch
        importDate
        importSource
        plaidID
        overrideName
        memo
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      accountId
      amount
      isoCurrencyCode
      unofficialCurrencyCode
      categoryFolder
      category
      categoryId
      date
      exactTime
      location {
        id
        address
        city
        lat
        lon
        region
        storeNumber
        postalCode
        country
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      merchantName
      name
      originalDescription
      paymentMeta {
        id
        byOrderOf
        payee
        payer
        paymentMethod
        paymentProcessor
        ppdId
        reason
        referenceNumber
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      pending
      pendingTransactionId
      transactionId
      transactionType
      accountOwner
      authorizedDate
      transactionCode
      paymentChannel
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    nextToken
    startedAt
  }
}
query GetTransaction($id: ID!) {
  getTransaction(id: $id) {
    id
    wrapper {
      id
      importBatch
      importDate
      importSource
      plaidID
      userData {
        id
        max_import_batch
        oldest_pending_time
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      transaction {
        id
        accountId
        amount
        isoCurrencyCode
        unofficialCurrencyCode
        categoryFolder
        category
        categoryId
        date
        exactTime
        merchantName
        name
        originalDescription
        pending
        pendingTransactionId
        transactionId
        transactionType
        accountOwner
        authorizedDate
        transactionCode
        paymentChannel
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      overrideName
      memo
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    accountId
    amount
    isoCurrencyCode
    unofficialCurrencyCode
    categoryFolder
    category
    categoryId
    date
    exactTime
    location {
      id
      transaction {
        id
        accountId
        amount
        isoCurrencyCode
        unofficialCurrencyCode
        categoryFolder
        category
        categoryId
        date
        exactTime
        merchantName
        name
        originalDescription
        pending
        pendingTransactionId
        transactionId
        transactionType
        accountOwner
        authorizedDate
        transactionCode
        paymentChannel
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      address
      city
      lat
      lon
      region
      storeNumber
      postalCode
      country
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    merchantName
    name
    originalDescription
    paymentMeta {
      id
      transaction {
        id
        accountId
        amount
        isoCurrencyCode
        unofficialCurrencyCode
        categoryFolder
        category
        categoryId
        date
        exactTime
        merchantName
        name
        originalDescription
        pending
        pendingTransactionId
        transactionId
        transactionType
        accountOwner
        authorizedDate
        transactionCode
        paymentChannel
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      byOrderOf
      payee
      payer
      paymentMethod
      paymentProcessor
      ppdId
      reason
      referenceNumber
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    pending
    pendingTransactionId
    transactionId
    transactionType
    accountOwner
    authorizedDate
    transactionCode
    paymentChannel
    _version
    _deleted
    _lastChangedAt
    createdAt
    updatedAt
  }
}
query ListTransactions(
  $filter: ModelTransactionFilterInput
  $limit: Int
  $nextToken: String
) {
  listTransactions(filter: $filter, limit: $limit, nextToken: $nextToken) {
    items {
      id
      wrapper {
        id
        importBatch
        importDate
        importSource
        plaidID
        overrideName
        memo
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      accountId
      amount
      isoCurrencyCode
      unofficialCurrencyCode
      categoryFolder
      category
      categoryId
      date
      exactTime
      location {
        id
        address
        city
        lat
        lon
        region
        storeNumber
        postalCode
        country
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      merchantName
      name
      originalDescription
      paymentMeta {
        id
        byOrderOf
        payee
        payer
        paymentMethod
        paymentProcessor
        ppdId
        reason
        referenceNumber
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      pending
      pendingTransactionId
      transactionId
      transactionType
      accountOwner
      authorizedDate
      transactionCode
      paymentChannel
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    nextToken
    startedAt
  }
}
query SyncPaymentMetas(
  $filter: ModelPaymentMetaFilterInput
  $limit: Int
  $nextToken: String
  $lastSync: AWSTimestamp
) {
  syncPaymentMetas(
    filter: $filter
    limit: $limit
    nextToken: $nextToken
    lastSync: $lastSync
  ) {
    items {
      id
      transaction {
        id
        accountId
        amount
        isoCurrencyCode
        unofficialCurrencyCode
        categoryFolder
        category
        categoryId
        date
        exactTime
        merchantName
        name
        originalDescription
        pending
        pendingTransactionId
        transactionId
        transactionType
        accountOwner
        authorizedDate
        transactionCode
        paymentChannel
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      byOrderOf
      payee
      payer
      paymentMethod
      paymentProcessor
      ppdId
      reason
      referenceNumber
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    nextToken
    startedAt
  }
}
query GetPaymentMeta($id: ID!) {
  getPaymentMeta(id: $id) {
    id
    transaction {
      id
      wrapper {
        id
        importBatch
        importDate
        importSource
        plaidID
        overrideName
        memo
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      accountId
      amount
      isoCurrencyCode
      unofficialCurrencyCode
      categoryFolder
      category
      categoryId
      date
      exactTime
      location {
        id
        address
        city
        lat
        lon
        region
        storeNumber
        postalCode
        country
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      merchantName
      name
      originalDescription
      paymentMeta {
        id
        byOrderOf
        payee
        payer
        paymentMethod
        paymentProcessor
        ppdId
        reason
        referenceNumber
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      pending
      pendingTransactionId
      transactionId
      transactionType
      accountOwner
      authorizedDate
      transactionCode
      paymentChannel
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    byOrderOf
    payee
    payer
    paymentMethod
    paymentProcessor
    ppdId
    reason
    referenceNumber
    _version
    _deleted
    _lastChangedAt
    createdAt
    updatedAt
  }
}
query ListPaymentMetas(
  $filter: ModelPaymentMetaFilterInput
  $limit: Int
  $nextToken: String
) {
  listPaymentMetas(filter: $filter, limit: $limit, nextToken: $nextToken) {
    items {
      id
      transaction {
        id
        accountId
        amount
        isoCurrencyCode
        unofficialCurrencyCode
        categoryFolder
        category
        categoryId
        date
        exactTime
        merchantName
        name
        originalDescription
        pending
        pendingTransactionId
        transactionId
        transactionType
        accountOwner
        authorizedDate
        transactionCode
        paymentChannel
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      byOrderOf
      payee
      payer
      paymentMethod
      paymentProcessor
      ppdId
      reason
      referenceNumber
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    nextToken
    startedAt
  }
}
query SyncLocations(
  $filter: ModelLocationFilterInput
  $limit: Int
  $nextToken: String
  $lastSync: AWSTimestamp
) {
  syncLocations(
    filter: $filter
    limit: $limit
    nextToken: $nextToken
    lastSync: $lastSync
  ) {
    items {
      id
      transaction {
        id
        accountId
        amount
        isoCurrencyCode
        unofficialCurrencyCode
        categoryFolder
        category
        categoryId
        date
        exactTime
        merchantName
        name
        originalDescription
        pending
        pendingTransactionId
        transactionId
        transactionType
        accountOwner
        authorizedDate
        transactionCode
        paymentChannel
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      address
      city
      lat
      lon
      region
      storeNumber
      postalCode
      country
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    nextToken
    startedAt
  }
}
query GetLocation($id: ID!) {
  getLocation(id: $id) {
    id
    transaction {
      id
      wrapper {
        id
        importBatch
        importDate
        importSource
        plaidID
        overrideName
        memo
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      accountId
      amount
      isoCurrencyCode
      unofficialCurrencyCode
      categoryFolder
      category
      categoryId
      date
      exactTime
      location {
        id
        address
        city
        lat
        lon
        region
        storeNumber
        postalCode
        country
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      merchantName
      name
      originalDescription
      paymentMeta {
        id
        byOrderOf
        payee
        payer
        paymentMethod
        paymentProcessor
        ppdId
        reason
        referenceNumber
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      pending
      pendingTransactionId
      transactionId
      transactionType
      accountOwner
      authorizedDate
      transactionCode
      paymentChannel
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    address
    city
    lat
    lon
    region
    storeNumber
    postalCode
    country
    _version
    _deleted
    _lastChangedAt
    createdAt
    updatedAt
  }
}
query ListLocations(
  $filter: ModelLocationFilterInput
  $limit: Int
  $nextToken: String
) {
  listLocations(filter: $filter, limit: $limit, nextToken: $nextToken) {
    items {
      id
      transaction {
        id
        accountId
        amount
        isoCurrencyCode
        unofficialCurrencyCode
        categoryFolder
        category
        categoryId
        date
        exactTime
        merchantName
        name
        originalDescription
        pending
        pendingTransactionId
        transactionId
        transactionType
        accountOwner
        authorizedDate
        transactionCode
        paymentChannel
        _version
        _deleted
        _lastChangedAt
        createdAt
        updatedAt
      }
      address
      city
      lat
      lon
      region
      storeNumber
      postalCode
      country
      _version
      _deleted
      _lastChangedAt
      createdAt
      updatedAt
    }
    nextToken
    startedAt
  }
}
